//@version=5
indicator(title="WSH BullBear EMA Channel", precision=5, overlay=true, max_labels_count = 400)

var float _rangeBoundary =  0.01   // The percentage increase / decrease to ignore sentiment changes
var float _feesTaker = 0.0001      // The taker fee for the exchange
var float _feesMaker = 0.00005     // The maker fee for the exchange


type InvestmentInfo
    float invested = 200
    float leverage = 15
    float shares = 0
var InvestmentInfo _investmentInfo = InvestmentInfo.new()


// This is for keeping track of the current state of the analysis
type AnalysisInfo
    bool sentimentTrailing  // The sentiment from the prior bar(s)
    bool sentimentCurrent   // The sentiment of the current bar
    bool sentimentIsChanged // The sentiment has changed from the trailing sentiment
    bool sentimentIsOverridden // If the Sentiment changed isChanged will be true, but if it has been overridden this value will be true.
    bool voteEMALowestDirectionChanged      // If the lowest EMA factor indicates a change in sentiment
    bool emaLowestDirectionLongTrailing     // The prior direction of emaLowest factor
    bool emaLowestDirectionLongCurrent      // The current direction of emaLowest factor
    float macdValue                         // The MACD Percentage macdValue
    float rangeBoundaryMarkLow             // The specific price at which the Range Boundary is measured against.  Reset every time Sentiment is really changed
    float rangeBoundaryMarkHigh
    bool shouldCloseOrder
    bool detectedSentimentChange            // True if the system detected a sentiment change.  The actual SentimentIsChanged is the final result after any overrides

    int direction                           // 1 = Up, 2 = Down
var _analysisInfo = AnalysisInfo.new(sentimentCurrent = false, sentimentTrailing = false)


// This keeps track of the current order
type CurrentOrderInfo
    bool isActive = false    
    bool isLong = false
    int orderId = 0
    float buyPrice = 0
    float numShares = 0
    float profit = 0
    float fees = 0
    float rangeLow = 0      // The lower price point of the bounded range in which sentiment changes are ignored
    float rangeHigh = 0     // The upper price point of the bounded range
var CurrentOrderInfo _coi = CurrentOrderInfo.new()

var float macdFast = na
var float macdSlow = na


//**********************************************************************
// Determines if the Sentiment should be marked changed.
//**********************************************************************
TallyVote() =>
    bool result = false
    if _analysisInfo.voteEMALowestDirectionChanged 
        result := true

    _analysisInfo.detectedSentimentChange := result    

    _analysisInfo.sentimentIsChanged := result
    _analysisInfo.sentimentCurrent := not _analysisInfo.sentimentCurrent


//**********************************************************************


//**********************************************************************
// Closes out the current order
//**********************************************************************
CloseOrder() =>
    log.info("Closing order ({0})", _coi.orderId)

    // Calculate selling fees
    _coi.fees += close * _feesMaker
    
    string labelText = ""
    lbl = label.new(bar_index, na)
    label.set_textcolor(lbl, color.white)

    float labelY = 0.07
    if close > 9999
        labelY := 175
    else if close > 999
        labelY := 40
    else if close > 99
        labelY := 8  

    if _coi.isLong
        label.set_y (lbl, close - labelY)
    else
        label.set_y (lbl, close + labelY)

    string positionType = "Long"
    float profit = 0
    float perDiff = 0
    float priceDiff = 0
    if _coi.isLong
        priceDiff := close - _coi.buyPrice
        perDiff := (priceDiff / _coi.buyPrice)*100
        profit := ((priceDiff * _coi.numShares) - _coi.fees)
        label.set_style(lbl, label.style_label_up)
    else
        positionType := "Short"
        priceDiff := _coi.buyPrice - close
        perDiff := (priceDiff / _coi.buyPrice)*100
        profit := ((priceDiff * _coi.numShares) - _coi.fees)
        label.set_style(lbl, label.style_label_down)
    if profit <= 0 
        label.set_color(lbl, color.purple)
    else
        label.set_color(lbl, color.blue)
    labelText := str.format("Close {0} ({1})\nShares {6}\nProfit: $ {2}\nPercent: {3}%\nPrice Gain: $ {4}\nFees: {5}", positionType, _coi.orderId ,profit, perDiff, priceDiff, _coi.fees, _coi.numShares)
    label.set_text(lbl, labelText)
    _coi.isActive := false

//**********************************************************************


//**********************************************************************
// * Determine if we should close the current order
//**********************************************************************
ShouldCloseOrder() =>
    bool value = false
    // We don't change sentiment if within range Boundary
    if close >= _analysisInfo.rangeBoundaryMarkLow and close <= _analysisInfo.rangeBoundaryMarkHigh
        log.info("CloseOrder detected SentimentChange.  Should close the order")
        value := false
    else if _analysisInfo.sentimentIsChanged
        value := true

    
    value 

//**********************************************************************



//**********************************************************************
// * Determine if we should open a new order
//**********************************************************************
ShouldOpenOrder() =>
    if _analysisInfo.sentimentIsChanged
        true
    else
        false
//**********************************************************************


//**********************************************************************
// * Opens a new order
//**********************************************************************
OpenOrder(bool isLong) =>
    _coi.buyPrice := close
    _coi.isLong := isLong
    _coi.isActive := true
    _coi.orderId += 1
    _coi.fees := 0

    // Set the RANGE Boundaries
    float boundarySize = close * _rangeBoundary
    _coi.rangeHigh := close + boundarySize
    _coi.rangeLow  := close - boundarySize

    string labelText = ""
    lbl = label.new(bar_index, na)
    string buyType = ""
    string title = ""
    if (isLong)
        buyType := "Long"
        label.set_color(lbl, color.lime)
        label.set_yloc(lbl, yloc.abovebar)
        label.set_style(lbl, label.style_label_up)
    else
        buyType := "Short"
        label.set_color(lbl, color.red)
        label.set_yloc(lbl, yloc.belowbar)
        label.set_style(lbl, label.style_label_down)
    title := str.format("Buy {0} ({1})  $ {2}", buyType, _coi.orderId, close)
    label.set_text(lbl, title)
    
    string labelToolTip = str.format("Macd:{0} |  {1}  {2}\n Range: {3} - {4}", _analysisInfo.macdValue, macdFast, macdSlow, _coi.rangeLow, _coi.rangeHigh)
    label.set_tooltip(lbl, labelToolTip)

    log.info("Order Opened : {0}", close)
//**********************************************************************




float expansionFactor = 0.05
float emaFreeZone = 0.02


var cGreen5 =color.new( #71a2e1,100)
var cGreen4 = 	#34a84a
var cGreen3 = #ffc7ea
var cGreen2 = #fb829e
var cGreen1 = #b71818
var cNeutral = #fffad2
var cRed2 = #ffc7ea
var cRed3 = #fb829e
var cRed4 = #d91e1e
var cRed5 = #b71818
var color cYellow = 	#f9dc52
var color cOrange = #e3950b



// Current Order Information
var float _coiBuyPrice = 0
var bool _coiIsLong = false
var bool _coiIsActive = false
var stupid = false

// Setup the EMA's and plot them.
emaShort = ta.ema(close,5)
sShort = "EMA Short-4"

emaShortMid = ta.ema(close, 10)
sShortMid = "EMA SMid-10"

emaMid = ta.ema(close, 20)
sMid = "EMA Mid-20"

emaLongMid = ta.ema(close, 30)
sLongMid = "EMA LMid-30"

emaLong = ta.ema(close, 40)
sLong = "EMA Long-50"

ema100 = ta.ema(close,100)
sBand = "EMA Band-100"

macdFast := ta.ema(close, 12)
macdSlow := ta.ema(close,26)
_analysisInfo.macdValue := (macdFast - macdSlow) / macdSlow * 100


emaBand = emaShort
emaFactor = emaShortMid

// We do not plot this yet.
//plot(ema200, color = color.white, linewidth = 8, title = "EMA 200")
//plot(emaShort, color = color.purple, linewidth = 4, title = sShort)
plot(emaShortMid, color = color.orange, linewidth = 6, title = sShortMid)
plot(emaMid, color = #E01AA7,linewidth = 3, title = sMid)
plot(emaLongMid, color = color.aqua, linewidth = 3, title = sLongMid)
plot(emaFactor, color = #9AE12B, linewidth = 2, title = sLong)
plot(ema100, color = color.white, linewidth = 3, title = "EMA 100")


bool isLong = false
bool isShort = false
color barColor = na


// Refresh current Analysis Info
if barstate.isfirst
    // Calculate Investment # of shares (rough estimate for pricing purposes)
    _investmentInfo.shares := _investmentInfo.invested * _investmentInfo.leverage / open
    _coi.numShares := _investmentInfo.shares
else
    _analysisInfo.emaLowestDirectionLongCurrent := emaBand < emaFactor ? true : false
    _analysisInfo.voteEMALowestDirectionChanged := _analysisInfo.emaLowestDirectionLongCurrent != _analysisInfo.emaLowestDirectionLongTrailing 

    TallyVote ()
    if _analysisInfo.sentimentIsChanged
        if _analysisInfo.emaLowestDirectionLongCurrent 
            isShort := true
        else
            isLong := true
            


//***********************************************************************************************
// ** Order Logic
// 2A.  Now lets determine if we need to do anything with an active order if there is one.
if _coi.isActive  
    // Sentiment has changed.  We need to close this order.
    bool shouldClose = ShouldCloseOrder()
    if shouldClose
        CloseOrder()



//***********************************************************************************************
// 2B.  Determine if we need to create a new order
bool shouldOpen = ShouldOpenOrder()
if shouldOpen
    OpenOrder(isLong)
    barColor := color.yellow


color colorBandBullish = #0aff68
color cBull80 = 	#c9ecaf
color cBullMid = #19784a

color colorBandBearish = #ff0a5a
//color colorBullish   = #00752d
color colorBullish = #C8F0B7
color colorBearish = #990032
color centerColor = color.black
color bandColor = color.black
float bandHeight = 1


if _analysisInfo.emaLowestDirectionLongCurrent
    bandColor := cGreen4
    // If Bearish in bullish run
    if emaShort < emaLong
        bandColor := cRed5
    else if emaShort < emaLongMid
        bandColor := cRed3
    else if emaShort < emaMid
        bandColor := cOrange
    else if emaShort < emaShortMid
        bandColor := cYellow

    centerColor := colorBullish
    expansionFactor := 1 - expansionFactor
    bandHeight := emaFactor * expansionFactor
else
    centerColor := colorBearish
    bandColor := colorBandBearish
    expansionFactor := 1 + expansionFactor
    bandHeight := emaFactor * expansionFactor


// Set transparency for band
bandColor := color.new(bandColor,50)

// Plot the centerband
centerPlot = plot(emaBand,color = centerColor, title = sBand, linewidth = 4)

// Plot the band 
//bandPlot = plot(bandHeight, color = bandColor, title = "Band Range", linewidth = 10)
//fill(centerPlot, bandPlot, color = bandColor)






//Bands
color1   =  #0aff68
colorPositive   = #00752d
color3   = #ff0a5a
color4   = #990032


// Final stuff
// Draw the bar in the correct color
barcolor(barColor)


// Reset some globals
_analysisInfo.sentimentIsChanged := false
_analysisInfo.emaLowestDirectionLongTrailing := _analysisInfo.emaLowestDirectionLongCurrent
_analysisInfo.sentimentIsOverridden := false

if _analysisInfo.sentimentIsChanged == false
    _analysisInfo.sentimentTrailing := _analysisInfo.sentimentCurrent

