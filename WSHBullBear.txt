// EMA Interval values:
// Short 0 - 20
//   S1 = 
//   S2 = 
//   S3 =
// Mid 21 - 50
//   M1 = 
//   M2 = 
//   M3 = 
// Long 51 -+
//   l1
//   l2
//   l3 = 


//@version=5
//indicator(title="WSH BullBear EMA Channel", precision=5, overlay=true, max_labels_count = 500)
strategy(title="WSH BullBear EMA Channel", precision=5, overlay=true, max_labels_count = 500)

var float _rangeBoundary =  0.005  // The percentage increase / decrease to ignore sentiment changes
var float _feesTaker = 0.00025      // The taker fee for the exchange
var float _feesMaker = 0.00075     // The maker fee for the exchange


type InvestmentInfo
    float invested = 200
    float leverage = 15
    float shares = 0
var InvestmentInfo _investmentInfo = InvestmentInfo.new()



// An EMA Indicator that keeps track of the status of the EMA and how it is voting for a sentiment / direction change
type IndicatorEMA
    bool didJustChangeDirection = false
    bool trendIsUpLT = false                    // IF the indicator's overall trend is up (long / bullish)
    bool trendIsUpST = false                    // If the indicator's overall trend is down / short / bearish
    float value = na                            // The EMA series
    int lastVoteChange = 0                      // How many bars ago it "voted" to confirm a direction change
    int votingWeight = 0                        // How much weight this indicator has in the overall indicator weightings which must total 100
    float votingValue = 0                       // The degree of confidence in voting its full weight.  Less confidence then less weight that is voted.
    string title = ""                           // Title to show on chart




// This is for keeping track of the current state of the analysis
type AnalysisInfo
    bool setupCompleted = false     // Determines if this object has had initialization done.
    bool sentimentTrailing      // The sentiment from the prior bar(s)
    bool sentimentCurrentIsLong      // The sentiment of the current bar.  True if long, false if short
    bool sentimentIsChanged     // The sentiment has changed from the trailing sentiment
    IndicatorEMA indEMA_S1    // The Shortest / quickest to change indicator
    IndicatorEMA indEMA_S3          
    IndicatorEMA indEMA_M1      // The Longest EMA
    IndicatorEMA indEMA_L1      // The Longest EMA
    bool emaLowestDirectionLongCurrent      // The current direction of emaLowest factor
    float macdValue                         // The MACD Percentage macdValue
    bool detectedSentimentChange            // True if the system detected a sentiment change.  The actual SentimentIsChanged is the final result after any overrides
    float totalProfit = 0
var AnalysisInfo _analysisInfo =  AnalysisInfo.new(sentimentCurrentIsLong = false, sentimentTrailing = false)


// This keeps track of the current order
type CurrentOrderInfo
    bool isActive = false    
    bool isLong = false
    int orderId = 0
    float buyPrice = 0
    float numShares = 0
    float profit = 0
    float profitPercent = 0
    float sharePriceChange = 0
    float fees = 0
    string positionTypeTitleShort = ""
    float rangeLow = 0      // The lower price point of the bounded range in which sentiment changes are ignored
    float rangeHigh = 0     // The upper price point of the bounded range
    float recentLow = 0     // The most recent low back so many bars when the order was opened
    float recentHigh = 0    // The most recent high back so many bars when the order was opened
var CurrentOrderInfo _coi = CurrentOrderInfo.new()



//type OrderCloseChecker 
    

var float macdFast = na
var float macdSlow = na



//**********************************************************************
// * Calculates Percentage Change for a start and end value
//**********************************************************************
PercentageChange(start, end) =>
    float value = ((end - start) / start) * 100
    value   
//**********************************************************************


//**********************************************************************
// Calculates the Order percentage change.  
//**********************************************************************
OrderPercentageChange(start, end, bool orderIsLong = true) =>
    float value = PercentageChange(start, end)
    if not orderIsLong    
        value := value * -1
    value
//**********************************************************************


//**********************************************************************
// * Calculates the percentage change over a given period.  BarsBacks = Starting point in past to start at (in bars)
//**********************************************************************
PercentageChangePeriod(int barsBack) =>
    overall_change = PercentageChange(close[0], open[barsBack])
    //overall_change = ((close[0] - open[lkb]) / open[lkb]) * 100
    float highest_high = 0
    float lowest_low = 0
    for i = barsBack to 0
        highest_high := i == barsBack ? high : high[i] > high[(i + 1)] ? high[i] : highest_high[1]
        lowest_low := i == barsBack ? low : low[i] < low[(i + 1)] ? low[i] : lowest_low[1]
    
    start_to_high = ((highest_high - open[barsBack]) / open[barsBack]) * 100
    start_to_low = ((lowest_low - open[barsBack]) / open[barsBack]) * 100
    
    [overall_change, start_to_high, start_to_low]

//**********************************************************************


//**********************************************************************
// Calculates the Share Price Change, Profit Percentage and the Total Profit for the order.
//**********************************************************************
CalculateOrderProfit() =>
    if _coi.isLong
        _coi.sharePriceChange := close - _coi.buyPrice
        _coi.profitPercent :=  OrderPercentageChange(_coi.buyPrice, close, _coi.isLong) 
        _coi.profit := ((_coi.sharePriceChange * _coi.numShares) - _coi.fees)
    else
        _coi.sharePriceChange := _coi.buyPrice - close
        _coi.profitPercent  :=  OrderPercentageChange(_coi.buyPrice, close, _coi.isLong) 
        _coi.profit := ((_coi.sharePriceChange * _coi.numShares) - _coi.fees)
//**********************************************************************





//**********************************************************************
// Closes out the current order
//**********************************************************************
CloseOrder() =>
    log.info("Closing order ({0})", _coi.orderId)

    // Calculate selling fees
    _coi.fees += close * _feesMaker * _coi.numShares
    
    string labelText = ""
    lbl = label.new(bar_index, na)
    label.set_textcolor(lbl, color.white)

    float labelY = 0.092
    if close > 9999
        labelY := 175
    else if close > 999
        labelY := 18
    else if close > 99
        labelY := 0.8

    if _coi.isLong
        label.set_y (lbl, close - labelY)
    else
        label.set_y (lbl, close + labelY)

    CalculateOrderProfit()

    if _coi.isLong
        label.set_style(lbl, label.style_label_up)
    else
        label.set_style(lbl, label.style_label_down)
    if _coi.profit <= 0 
        label.set_color(lbl, color.purple)
    else
        label.set_color(lbl, color.blue)

    _analysisInfo.totalProfit += _coi.profit
    labelText := str.format("Close {0} ({1})\nShares {6}\nProfit: $ {2}\nPercent: {3}%\nPrice Gain: $ {4}\nFees: {5}\nTotal Profit $ {7}", _coi.positionTypeTitleShort, _coi.orderId , _coi.profit, _coi.profitPercent, _coi.sharePriceChange, _coi.fees, _coi.numShares, _analysisInfo.totalProfit)
    label.set_text(lbl, labelText)
    _coi.isActive := false
//**********************************************************************


//**********************************************************************
// * Updates certain order information with current data
//**********************************************************************
UpdateOrder() =>
    CalculateOrderProfit()

//**********************************************************************


//**********************************************************************
// * Determine if we should close the current order
//**********************************************************************
ShouldCloseOrder() =>
    bool value = false
    bool forced = false     // If true then no more voting should be done and the current value should be returned.

    // Update some stats on the order that we need
    UpdateOrder()

    // This should always be first item
    if _analysisInfo.sentimentIsChanged
        value := true
        if _coi.isActive
            // If the new sentiment is the same as the order sentiment.  Then leave order open
            if _analysisInfo.sentimentCurrentIsLong == _coi.isLong
                value := false
        
    log.info("ShoulCloseOrder?:  Vote2: Analysis Sentiment Changed: {0}", value)    

    // This evaluates conditions that would close an order regardless of the Sentiment.
    if true == true
        bool doSomething = false

    // We don't change sentiment if within range Boundary
    if close >= _coi.rangeLow and close <= _coi.rangeHigh
        forced := true
        value := false
    log.info("ShoulCloseOrder?:  Vote1: Outside Range Boundary: {0}", value)    

    if not forced and true == true
        bool doSomething = false

    log.warning("ShouldCloseOrder?: Final Tally: {0}  Forced Override: {1}", value, forced)
    value 

//*********************************************************************


//**********************************************************************
// * Determine if we should open a new order
//**********************************************************************
ShouldOpenOrder() =>
    // Need at least 2 of the EMA indicators to indicate a trend reversal
    //if _analysisInfo.in
    if _analysisInfo.sentimentIsChanged
        true
    else
        false
//**********************************************************************


//**********************************************************************
// * Opens a new order
//**********************************************************************
OpenOrder(bool isLong) =>
    _coi.buyPrice := close
    _coi.isLong := isLong
    _coi.isActive := true
    _coi.orderId += 1
    _coi.fees := 0
    _coi.recentHigh := 0
    _coi.recentLow := 0

    // Calculate purchase fees
    _coi.fees := close * _feesTaker  * _coi.numShares

    // Set the RANGE Boundaries
    float boundarySize = close * _rangeBoundary
    _coi.rangeHigh := close + boundarySize
    _coi.rangeLow  := close - boundarySize

    string labelText = ""
    lbl = label.new(bar_index, na)
    string buyType = ""
    string title = ""
    if (isLong)
        buyType := "Long"
        label.set_color(lbl, color.lime)
        label.set_yloc(lbl, yloc.abovebar)
        label.set_style(lbl, label.style_label_up)
    else
        buyType := "Short"
        label.set_color(lbl, color.red)
        label.set_yloc(lbl, yloc.belowbar)
        label.set_style(lbl, label.style_label_down)
    title := str.format("Buy {0} ({1})  $ {2}", buyType, _coi.orderId, close)
    label.set_text(lbl, title)
    
    string labelToolTip = str.format("Macd:{0} |  {1}  {2}\n Range: {3} - {4}", _analysisInfo.macdValue, macdFast, macdSlow, _coi.rangeLow, _coi.rangeHigh)
    label.set_tooltip(lbl, labelToolTip)

    log.info("Order Opened : {0}", close)
//**********************************************************************



//**********************************************************************
// Sets up the Analysis Info record.
//**********************************************************************
SetupAnalysisInfo(float ema1, float ema_S3, float ema_M1, float ema_L1) =>
    if not _analysisInfo.setupCompleted
        _analysisInfo.indEMA_S1 := IndicatorEMA.new(title = "EMA S1 - 5")
        _analysisInfo.indEMA_L1 := IndicatorEMA.new(title ="EMA L1 - 100")
        _analysisInfo.indEMA_S3 := IndicatorEMA.new(title = "EMA S3 - 20")
        _analysisInfo.indEMA_M1 := IndicatorEMA.new(title = "EMA M1 - 32")
        _analysisInfo.setupCompleted := true
    
    // Short EMA
    _analysisInfo.indEMA_S1.value := ema1
    _analysisInfo.indEMA_S1.didJustChangeDirection := false

    // Mid EMA
    _analysisInfo.indEMA_S3.value := ema_S3
    _analysisInfo.indEMA_S3.didJustChangeDirection := false

    // Mid Long EMA
    _analysisInfo.indEMA_M1.value := ema_M1
    _analysisInfo.indEMA_M1.didJustChangeDirection := false


    // Long EMA
    _analysisInfo.indEMA_L1.value := ema_L1
    _analysisInfo.indEMA_L1.didJustChangeDirection := false

//**********************************************************************



//**********************************************************************
// * Updates all the indicators with current info for this pass
//**********************************************************************
UpdateIndicators() =>
    bool completed = false

    bool didJustChangeDirection = false
    bool trendIsUpLT = false                    // IF the indicator's overall trend is up (long / bullish)
    bool trendIsUpST = false                    // If the indicator's overall trend is down / short / bearish
    float value = na                            // The EMA series
    int lastVoteChange = 0                      // How many bars ago it "voted" to confirm a direction change
    int votingWeight = 0                        // How much weight this indicator has in the overall indicator weightings which must total 100
    float votingValue = 0                       // The degree of confidence in voting its full weight.  Less confidence then less weight that is voted.
    string title = ""                           // Title to show on chart

    // Update the Shortest Indicator
    IndicatorEMA ind = _analysisInfo.indEMA_S1
    IndicatorEMA comp = _analysisInfo.indEMA_S3
    log.warning("TC Detection  [Longest: {0}  Shortest: {1}]", comp.value,ind.value)
    if ind.value > comp.value
        // Indicates upward movement.
        if not ind.trendIsUpST
            ind.trendIsUpST := true
            ind.didJustChangeDirection := true
            log.warning("Trend Change Up\nLongest: {0}\nShortest: {1}", comp.value, ind.value)
    else
        if  ind.trendIsUpST
            ind.trendIsUpST := false
            ind.didJustChangeDirection := true
            log.warning("Trend Change DOWN\nLongest: {0}\n  Shortest: {1}", comp.value, ind.value)

//**********************************************************************


//**********************************************************************
// * Scores the current analysis to see if sentiment should be changed
//**********************************************************************
ScoreAnalysis() =>
    bool scoreIsChanged = false
    if _analysisInfo.indEMA_S1.didJustChangeDirection
        scoreIsChanged := true

    _analysisInfo.sentimentIsChanged := scoreIsChanged
    _analysisInfo.sentimentCurrentIsLong := _analysisInfo.indEMA_S1.trendIsUpST
    scoreIsChanged
//**********************************************************************


// Start of Logic

// Define the EMA's we will use.  They should be listed in order you want them to overlay other plots
ema_L1 = ta.ema(close,100)
const string cEMATitle_L1 = "EMA Long 50"

ema_M1 = ta.ema(close, 32)
const string cEMATitle_M1 = "EMA Mid 32"

ema_S3 = ta.ema(close, 20)
const string cEMATitle_S3 = "EMA SMid 20"

ema_S1 = ta.ema(close,5)
const string cEMATitle_S1 = "EMA Short 5"



// Setup and Update Indicators each pass.
SetupAnalysisInfo(ema_S1, ema_S3, ema_M1, ema_L1)
UpdateIndicators()
ScoreAnalysis()


// These plot statements must appear after the SetupAnalysisInfo function call!
plot(_analysisInfo.indEMA_L1.value, color = color.white, linewidth = 3, title = cEMATitle_L1)
plot(_analysisInfo.indEMA_M1.value, color = color.orange, linewidth = 2, title = cEMATitle_M1)
plot(_analysisInfo.indEMA_S3.value, color = color.aqua, linewidth = 2, title = cEMATitle_S3)
plot(_analysisInfo.indEMA_S1.value, color = #9AE12B, linewidth = 2, title = cEMATitle_S1)

macdFast := ta.ema(close, 12)
macdSlow := ta.ema(close,26)
_analysisInfo.macdValue := (macdFast - macdSlow) / macdSlow * 100

sma = ta.sma(close,100)

plot(sma, color = color.purple, linewidth = 3, title = "SMA 100")





color barColor = na


// Refresh current Analysis Info
if barstate.isfirst
    // Calculate Investment # of shares (rough estimate for pricing purposes)
    _investmentInfo.shares := _investmentInfo.invested * _investmentInfo.leverage / open
    _analysisInfo := AnalysisInfo.new(sentimentCurrentIsLong = false, sentimentTrailing = false)
    _coi.numShares := _investmentInfo.shares
    _coi.orderId := 0


//***********************************************************************************************
// ** Order Logic
// 2A.  Now lets determine if we need to do anything with an active order if there is one.
if _coi.isActive  
    // Sentiment has changed.  We need to close this order.
    bool shouldClose = ShouldCloseOrder()
    if shouldClose
        CloseOrder()
        barColor := color.yellow



//***********************************************************************************************
// 2B.  Determine if we need to create a new order
if not _coi.isActive
    bool shouldOpen = ShouldOpenOrder()
    if shouldOpen
        OpenOrder(_analysisInfo.sentimentCurrentIsLong)
        barColor := color.yellow


color centerColor = color.black
color bandColor = color.black
float bandHeight = 1



// Set transparency for band
bandColor := color.new(bandColor,50)



// Final stuff
// Draw the bar in the correct color
barcolor(barColor)


// Reset some globals
_analysisInfo.sentimentIsChanged := false
if _analysisInfo.sentimentIsChanged == false
    _analysisInfo.sentimentTrailing := _analysisInfo.sentimentCurrentIsLong






//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&


//PlotHiLow
// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © LonesomeThecolor.blue
lb = input(10, title="Left Bars")
rb = input(10, title="Right Bars")
showsupres = input(true, title="Support/Resistance", inline = "srcol")
supcol = input(color.lime, title ="", inline = "srcol")
rescol = input(color.red, title ="", inline = "srcol")
srlinestyle = input(line.style_dotted, title = "Line Style/Width", inline="style") 
srlinewidth = input(3, title = "", inline ="style")
changebarcol = input(true, title="Change Bar Color", inline = "bcol")
barColorUp = input(color.blue, title ="", inline = "bcol")
barColorDown = input(color.black, title ="", inline = "bcol")

ph = ta.pivothigh(lb, rb)
pl = ta.pivotlow(lb, rb)


// Trend direction
hl = ph > 0 ? 1 : pl > 0 ? -1 : na
zz = ph > 0 ? ph : pl > 0 ? pl : na
zz := (pl and hl == -1 and ta.valuewhen(hl,hl,1) == -1 and pl > ta.valuewhen(zz,zz,1)) ? na : zz
zz := (pl and hl == -1 and ta.valuewhen(hl,hl,1) == -1 and pl > ta.valuewhen(zz,zz,1)) ? na : zz
zz := (ph and hl == 1 and ta.valuewhen(hl,hl,1) == 1 and pl > ta.valuewhen(zz,zz,1)) ? na : zz


hl := (hl == -1 and ta.valuewhen(hl,hl,1) == 1 and zz > ta.valuewhen(zz,zz,1)) ? na : hl
hl := (hl == 1 and ta.valuewhen(hl,hl,1) == -1 and zz < ta.valuewhen(zz,zz,1)) ? na : hl

zz := na(hl) ? na : zz

findprevious()=>  // finds previous three points (b, c, d, e)
    ehl = hl == 1 ? -1 : 1
    loc1 = 0.0, loc2 = 0.0, loc3 = 0.0, loc4 = 0.0
    xx = 0
    for x=1 to 1000
        if hl[x]==ehl and not na(zz[x])
            loc1 := zz[x]
            xx := x + 1
            break
    ehl := hl
    for x=xx to 1000
        if hl[x]==ehl and not na(zz[x])
            loc2 := zz[x]
            xx := x + 1
            break
    ehl := hl == 1 ? -1 : 1
    for x=xx to 1000
        if hl[x]==ehl and not na(zz[x])
            loc3 := zz[x]
            xx := x + 1
            break
    ehl := hl
    for x=xx to 1000
        if hl[x]==ehl and not na(zz[x])
            loc4 := zz[x]
            break
    [loc1, loc2, loc3, loc4]

float a = na, float b = na, float c = na, float d = na, float e = na
if not na(hl)
    [loc1, loc2, loc3, loc4] = findprevious()
    a := zz 
    b := loc1
    c := loc2
    d := loc3
    e := loc4

_hh = zz and (a > b and a > c and c > b and c > d)
_ll = zz and (a < b and a < c and c < b and c < d)
_hl = zz and ((a >= c and (b > c and b > d and d > c and d > e)) or (a < b and a > c and b < d))
_lh = zz and ((a <= c and (b < c and b < d and d < c and d < e)) or (a > b and a < c and b > d))

plotshape(_hl, text="HL", title="Higher Low", style=shape.labelup, color=color.lime, textcolor=color.black, location=location.belowbar, offset = -rb)
plotshape(_hh, text="HH", title="Higher High", style=shape.labeldown, color=color.lime, textcolor=color.black, location=location.abovebar, offset = -rb)
plotshape(_ll, text="LL", title="Lower Low", style=shape.labelup, color=color.red, textcolor=color.white, location=location.belowbar, offset = -rb)
plotshape(_lh, text="LH", title="Lower High", style=shape.labeldown, color=color.red, textcolor=color.white, location=location.abovebar, offset = -rb)

float resistance = na
float support = na
resistance := _lh ? zz : resistance[1]
support := _hl ? zz : support[1]

int trend = na
trend := close > resistance ? 1 : close < support ? -1 : nz(trend[1])

resistance := ((trend == 1 and _hh) or (trend == -1 and _lh)) ? zz : resistance
support := (( trend == 1 and _hl) or (trend == -1 and _ll)) ? zz :support
rechange = resistance != resistance[1]
suchange = support != support[1]

var line resline = na
var line supline = na
if showsupres
    if rechange
        line.set_x2(resline, bar_index)
        line.set_extend(resline, extend = extend.none)
        resline := line.new(x1 = bar_index - rb, y1 = resistance, x2 = bar_index, y2 = resistance, color = rescol, extend = extend.right, style = srlinestyle, width = srlinewidth)
     
    if suchange
        line.set_x2(supline, bar_index)
        line.set_extend(supline, extend = extend.none)
        supline := line.new(x1 = bar_index - rb, y1 = support, x2 = bar_index, y2 = support, color = supcol, extend = extend.right, style = srlinestyle, width = srlinewidth)    

barcolor(color = changebarcol ? (trend == 1) ? barColorUp :  barColorDown :  na)



